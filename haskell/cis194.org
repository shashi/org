* Chapter 3: Recursion and Polymorphism
** Recursion and polymorphism is more natural with pattern matching
** PM forces you to take care of all possibilities and boundary cases
** ADTs should be used wherever possible to structure data and hence functions
** head is a *partial function* because it doesn't work for some values in the domain. i.e. an empty list.
* Chapter 4: Higher order functions
** All haskell functions are curried. i.e. they take 1 argument
** Operator sections

   >100, 100> etc.

** uncurrying means passing a tuple as the argument

   curry f a b = f (a, b)
   uncurry f (a, b) = f a b 
   zipWith f a b = map (uncurry f) (zip a b)

** arguments should be ordered from "least to greatest variation" for best currying
** wholemeal programming (parial application & function composition are key) "point-free"

   foobar' :: [Integer] -> Integer
   foobar' = sum . map (\x -> 7*x + 2) . filter (>3)
   ;; Instead of
   foobar :: [Integer] -> Integer
   foobar []     = 0
   foobar (x:xs)
       | x > 3     = (7*x + 2) + foobar xs ;; Guard conditions
       | otherwise = foobar xs             ;; otherwise == False

*** In general, however, you should use foldl' from Data.List
     instead, which does the same thing as foldl but is more efficient.

* Chapter 5: More polymorphism and typeclasses
** *parametric polymorphism* is in Haskell
   (works for any type chosen by the caller)
   e.g. a -> a -> a has only 2 implementations:
   f1 x y = x
   f2 x y = y
   parametricicty provides guarantees instead of restrictions
** no reflection: because types get erased before runtime. e.g. typeof doesn't exist
   #+TODO: read about Java generics




** *type class polymorphic*
   (==), (<), (+) are polymorphic for classes Eq, Ord and Num
   syntax:
   class Eq a where
     (==) :: a -> a -> Bool
     (/=) :: a -> a -> Bool
     x /= y = not (x == y)
   "Eq is a type class with the parameter a. Any type a which wants to be an instance
    of Eq must define the functions (==) and (/=)"
** Some type classes are special, they can be derived by the compiler
   data Foo = F Int | C Char
     deriving (Eq, Ord, Show)
** Instances with constraints.
  instance (Listable a, Listable b) => Listable (a,b) where
     toList (x,y) = toList x ++ toList y
* Chapter 6: Lazy evaluation
** What's really at issue is side effects in languages that allow them
   interactions become time-sensitive. Haskell designers wanted a lazy language
   and soon realized that it would be impossible without making it pure as well.
   "thunk" is an unevaled expression.
** "pattern-matching drives evaluation"
   Expressions are not evaluated until pattern matched. example:
   take 3 (repeat 1) where
   repeat x = x:repeat x; take n x:xs = x:(take (n-1) xs); take 0 _ = []; -- one more case.
   GHC uses *graph reduction* to avoid reevaluating shared expressions

** Consequences
*** infinite data structures: game trees!!
*** short-circuiting for free:
        True && x = x
        False && _ = False
*** in cases such as foldl laziness is not desirable: it builds a humongous thunk and evaluates
    at the end. Could lead to avoidable stack overflows.
    
*** wholemeal programming gets pipelined is efficient for large data structures.
    Only things that are required for the next step get evaluated
*** Dynamic programming!!
